# -*- coding: utf-8 -*-
"""AutoML Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1InxZYRNiScPv_0rKmfwGUOGHavsoElQJ

Preprocessing for AutoML CNN (Spectrogram Generation)
"""

# Spectrogram Preprocessing for AutoML CNN
# Converts audio files (mp3/wav) → 3-channel spectrogram images

# Author: Ayush Dutta

import os
import librosa
import librosa.display
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm

# 1. Define paths
AUDIO_ROOT = "dataset/audio_files"        # Input audio directory
OUTPUT_ROOT = "dataset/audio_spectrograms"  # Output image directory
os.makedirs(OUTPUT_ROOT, exist_ok=True)

#  2. Function to generate spectrogram
def save_spectrogram(audio_path, output_path, sr=22050):
    try:
        y, sr = librosa.load(audio_path, sr=sr)
        S = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128)
        S_DB = librosa.power_to_db(S, ref=np.max)

        # Convert to 3-channel RGB image
        fig = plt.figure(figsize=(3, 3))
        plt.axis('off')
        librosa.display.specshow(S_DB, sr=sr, x_axis=None, y_axis=None, cmap='magma')
        plt.tight_layout(pad=0)
        plt.savefig(output_path, bbox_inches='tight', pad_inches=0)
        plt.close(fig)
    except Exception as e:
        print(f" Error processing {audio_path}: {e}")

# 3. Convert all audio files
for species in os.listdir(AUDIO_ROOT):
    input_dir = os.path.join(AUDIO_ROOT, species)
    output_dir = os.path.join(OUTPUT_ROOT, species)
    os.makedirs(output_dir, exist_ok=True)

    for file in tqdm(os.listdir(input_dir), desc=f"Processing {species}"):
        if file.endswith((".wav", ".mp3")):
            input_path = os.path.join(input_dir, file)
            output_path = os.path.join(output_dir, file.replace('.mp3', '.png').replace('.wav', '.png'))
            save_spectrogram(input_path, output_path)

print(f" All spectrograms saved in {OUTPUT_ROOT}")

"""Script 2 — AutoML CNN (Spectrogram-Based Classification)"""

# AutoML CNN for Bird Species Classification (Spectrogram Images)
# Author: Ayush Dutta
# Date: 2025


#  1. Library Imports
import autokeras as ak
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image_dataset_from_directory
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt

# 2. Dataset Loading
train_dir = "dataset/audio_spectrograms/seg_train"  # update paths as needed
test_dir = "dataset/audio_spectrograms/seg_test"

img_size = (224, 224)
batch_size = 32

train_ds = image_dataset_from_directory(
    train_dir,
    image_size=img_size,
    batch_size=batch_size,
    validation_split=0.2,
    subset="training",
    seed=42,
    label_mode="categorical"
)

val_ds = image_dataset_from_directory(
    train_dir,
    image_size=img_size,
    batch_size=batch_size,
    validation_split=0.2,
    subset="validation",
    seed=42,
    label_mode="categorical"
)

test_ds = image_dataset_from_directory(
    test_dir,
    image_size=img_size,
    batch_size=batch_size,
    shuffle=False,
    label_mode="categorical"
)

#  3. Normalize
AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.map(lambda x, y: (x / 255.0, y)).cache().prefetch(AUTOTUNE)
val_ds = val_ds.map(lambda x, y: (x / 255.0, y)).cache().prefetch(AUTOTUNE)
test_ds = test_ds.map(lambda x, y: (x / 255.0, y)).cache().prefetch(AUTOTUNE)

# 4. AutoML Model
clf = ak.ImageClassifier(
    overwrite=True,
    max_trials=5,      # Increase for better results
    seed=42
)

clf.fit(train_ds, epochs=15, validation_data=val_ds)

#  5. Evaluation
predicted_y = clf.predict(test_ds)
predicted_classes = np.argmax(predicted_y, axis=1)
true_classes = np.concatenate([y.numpy().argmax(axis=1) for x, y in test_ds])
class_names = test_ds.class_names

print("\n=== AutoML CNN Evaluation Results ===")
print(classification_report(true_classes, predicted_classes, target_names=class_names))

#  6. Confusion Matrix
cm = confusion_matrix(true_classes, predicted_classes)
plt.figure(figsize=(12, 10))
plt.imshow(cm, cmap='Blues')
plt.title("Confusion Matrix - AutoML CNN")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.colorbar()
plt.show()

#  7. Save Best Model
best_model = clf.export_model()
best_model.save("AutoML_Best_CNN_Model.h5")
print(" AutoML CNN model saved as AutoML_Best_CNN_Model.h5")